@using Microsoft.Maui
@using Microsoft.Maui.ApplicationModel
@using Microsoft.Maui.Controls
@using Microsoft.Maui.Graphics
@using Microsoft.Maui.Layouts
@using Soenneker.Blazor.CallbackRegistry.Abstract
@using Soenneker.Extensions.Task
@using Soenneker.Extensions.ValueTask
@using Soenneker.Maui.Blazor.Bridge.Abstract
@using Soenneker.Maui.Blazor.Bridge.Dtos

@typeparam TComponent where TComponent : View, new()

<div id="@ElementId" @ref="_elementReference"></div>

@code {

    // A unique identifier for element interop.
    private ElementReference _elementReference;

    public readonly string ElementId = Guid.NewGuid().ToString();

    [EditorRequired] [Parameter] public TComponent? Component { get; set; }

    [Inject] public IBlazorCallbackRegistry BlazorCallbackRegistry { get; set; } = null!;

    [Inject] public IMauiBlazorBridgeInterop MauiBlazorBridgeInterop { get; set; } = null!;

    private View? _overlayView; // Container for the native MAUI component

    private bool _initialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Component == null)
            return;

        if (_initialized)
            return;

        _initialized = true;

        await MauiBlazorBridgeInterop.Initialize().NoSync();

        await BlazorCallbackRegistry.Register<ElementPositionDto>(ElementId, async result => { await OnElementPositionReported(null, result).NoSync(); }).NoSync();

        // Ensure the MAUI element is rendered on the Main thread.
        await MainThread.InvokeOnMainThreadAsync(async () => { await RenderMauiElement().NoSync(); }).NoSync();
    }

    private async ValueTask RenderMauiElement()
    {
        // Get the current window and ensure its Page is a ContentPage.
        var window = Application.Current?.Windows.FirstOrDefault();
        if (window == null)
        {
            Console.WriteLine("No window available.");
            return;
        }

        if (!(window.Page is ContentPage contentPage))
        {
            Console.WriteLine("Page is not a ContentPage.");
            return;
        }

        // Wait until the ContentPage's Handler and MauiContext are available.
        while (contentPage.Handler?.MauiContext == null)
        {
            await Task.Delay(50);
        }


        var mauiContext = contentPage.Handler.MauiContext;

        // Create an AbsoluteLayout to host both the existing content and our overlay.
        var absoluteLayout = new AbsoluteLayout
        {
            BackgroundColor = Colors.Transparent
        };

        // If the page already has content (like a BlazorWebView), add it.
        if (contentPage.Content is View existingContent)
        {
            AbsoluteLayout.SetLayoutFlags(existingContent, AbsoluteLayoutFlags.All);
            AbsoluteLayout.SetLayoutBounds(existingContent, new Rect(0, 0, 1, 1));
            absoluteLayout.Children.Add(existingContent);
        }

        // Force the creation of the handler using the MauiContext.
        if (Component.Handler == null)
        {
            var handler = mauiContext.Handlers.GetHandler(Component.GetType());
            if (handler is IViewHandler viewHandler)
            {
                viewHandler.SetMauiContext(mauiContext); // Ensure MauiContext is set
                viewHandler.SetVirtualView(Component);
                Component.Handler = viewHandler;
                Console.WriteLine("Handler forced via MauiContext.");
            }
            else
            {
                Console.WriteLine("Failed to get an IViewHandler from MauiContext.");
            }
        }

        // Wrap the component in a layout container.
        var wrappedComponent = WrapInLayout(Component);

        // Position the overlay using proportional coordinates.
        _overlayView = wrappedComponent;
        AbsoluteLayout.SetLayoutFlags(_overlayView, AbsoluteLayoutFlags.PositionProportional);
        AbsoluteLayout.SetLayoutBounds(_overlayView, new Rect(0.5, 0.8, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize));
        absoluteLayout.Children.Add(_overlayView);

        // Set the AbsoluteLayout as the page's content.
        contentPage.Content = absoluteLayout;

        // Allow time for layout and handler attachment.
        await Task.Delay(100);

        if (Component.Handler == null)
        {
            Console.WriteLine("Handler is still null after layout pass.");
        }
        else
        {
            Console.WriteLine("Handler created successfully.");
        }

        // Set up additional interop (e.g., observe element position).
        await MauiBlazorBridgeInterop.ObserveElementPosition(_elementReference, ElementId).NoSync();
    }

    private async Task OnElementPositionReported(object? sender, ElementPositionDto e)
    {
        var height = await GetPageHeight();

        // Compute a conversion factor (Maui page height / viewport height).
        var conversionFactor = height / e.ViewportHeight;

        // Calculate desired overlay Y position in CSS pixels, then convert to Maui units.
        var dynamicOffsetCss = e.Height * 0.5;
        var overlayYCss = e.Top + e.Height + dynamicOffsetCss;
        var overlayYMaui = overlayYCss * conversionFactor;
        var yProportion = overlayYMaui / height;

        await MainThread.InvokeOnMainThreadAsync(() =>
        {
            if (_overlayView != null)
            {
                AbsoluteLayout.SetLayoutFlags(_overlayView, AbsoluteLayoutFlags.PositionProportional);
                AbsoluteLayout.SetLayoutBounds(_overlayView, new Rect(0.5, yProportion, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize));
            }
        });
    }

    private async ValueTask<double> GetPageHeight()
    {
        var page = Application.Current?.Windows.FirstOrDefault()?.Page;
        var height = page?.Height;

        while (height is null or <= 0)
        {
            await Task.Delay(100);
            height = page?.Height;
        }

        return height.Value;
    }

    // Simple wrapper that places the MAUI component in a Grid.
    private Layout WrapInLayout(View mauiComponent)
    {
        var grid = new Grid
        {
            RowDefinitions =
            {
                new RowDefinition {Height = GridLength.Auto}
            },
            ColumnDefinitions =
            {
                new ColumnDefinition {Width = GridLength.Auto}
            },
            HorizontalOptions = LayoutOptions.Start,
            VerticalOptions = LayoutOptions.Start,
            BackgroundColor = Colors.Transparent
        };
        grid.Children.Add(mauiComponent);
        return grid;
    }

    public async ValueTask RemoveElement()
    {
        BlazorCallbackRegistry.Unregister(ElementId);

        await MainThread.InvokeOnMainThreadAsync(async () =>
        {
            if (_overlayView != null)
            {
                try
                {
                    // Ensure _overlayView is removed from its parent
                    if (_overlayView.Parent is Layout parentLayout)
                    {
                        parentLayout.Children.Remove(_overlayView);
                        Console.WriteLine("Successfully removed _overlayView from parent layout.");
                    }

                    // Get current window and check for AbsoluteLayout
                    var window = Application.Current?.Windows.FirstOrDefault();
                    if (window?.Page is ContentPage contentPage && contentPage.Content is AbsoluteLayout absoluteLayout)
                    {
                        // **Check if _overlayView was wrapped inside a Grid**
                        var parentGrid = absoluteLayout.Children.FirstOrDefault(c => c is Grid grid && grid.Children.Contains(_overlayView)) as Grid;

                        // Remove the wrapping Grid if it was added
                        if (parentGrid != null)
                        {
                            absoluteLayout.Children.Remove(parentGrid);
                            Console.WriteLine("Successfully removed wrapping Grid from AbsoluteLayout.");
                        }
                        else if (absoluteLayout.Children.Contains(_overlayView))
                        {
                            absoluteLayout.Children.Remove(_overlayView);
                            Console.WriteLine("Successfully removed _overlayView from AbsoluteLayout.");
                        }

                        // Disconnect handler to fully release the view
                        _overlayView.Handler?.DisconnectHandler();
                        _overlayView.Handler = null;
                        _overlayView = null;

                        // Ensure no pending updates before modifying contentPage.Content
                        await Task.Delay(50);

                        // **Check if only the removed elements were targeted**
                        Console.WriteLine($"AbsoluteLayout children count after removal: {absoluteLayout.Children.Count}");
                        if (absoluteLayout.Children.Count == 0)
                        {
                            Console.WriteLine("AbsoluteLayout is empty; resetting contentPage.Content.");
                            contentPage.Content = null;
                        }
                        else
                        {
                            Console.WriteLine("Keeping AbsoluteLayout as it still has children.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error removing _overlayView: {ex.Message}");
                }
            }

            if (Component != null)
            {
                Component.DisconnectHandlers();
                Component.Handler = null;
                Component = null;
            }

            await Task.Delay(50);
        });
    }


    public async ValueTask DisposeAsync()
    {
        GC.SuppressFinalize(this);

        if (_overlayView != null)
        {
            await RemoveElement().NoSync();
        }
    }

}