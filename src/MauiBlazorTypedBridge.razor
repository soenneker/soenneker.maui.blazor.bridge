@using Microsoft.Maui
@using Microsoft.Maui.ApplicationModel
@using Microsoft.Maui.Controls
@using Microsoft.Maui.Graphics
@using Microsoft.Maui.Layouts
@using Soenneker.Blazor.CallbackRegistry.Abstract
@using Soenneker.Extensions.Task
@using Soenneker.Extensions.ValueTask
@using Soenneker.Maui.Blazor.Bridge.Abstract
@using Soenneker.Maui.Blazor.Bridge.Dtos
@using System.Threading

@inject IBlazorCallbackRegistry BlazorCallbackRegistry;
@inject IMauiBlazorBridgeInterop MauiBlazorBridgeInterop;

@typeparam TComponent where TComponent : View, new()

<div id="@ElementId" @ref="_elementReference" ></div>

@code {

    // Unique ID used for element interop.
    private ElementReference _elementReference;
    public readonly string ElementId = Guid.NewGuid().ToString();

    [EditorRequired]
    [Parameter]
    public TComponent? Component { get; set; }

    // The wrapped MAUI element that will be added to the overlay container.
    private View? _overlayView;
    private bool _initialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Component == null)
            return;

        if (_initialized)
            return;

        _initialized = true;

        await MauiBlazorBridgeInterop.Initialize().NoSync();

        await BlazorCallbackRegistry.Register<ElementPositionDto>(ElementId, async result => { await OnElementPositionReported(null, result).NoSync(); }).NoSync();

        // Render the MAUI element on the Main thread.
        await MainThread.InvokeOnMainThreadAsync(async () => { await RenderMauiElement().NoSync(); }).NoSync();
    }

    private async ValueTask RenderMauiElement(CancellationToken cancellationToken = default)
    {
        // Get the current window and ensure its Page is a ContentPage.
        Window? window = Application.Current?.Windows.FirstOrDefault();
        if (window == null)
        {
            Console.WriteLine("No window available.");
            return;
        }

        if (!(window.Page is ContentPage contentPage))
        {
            Console.WriteLine("Page is not a ContentPage.");
            return;
        }

        // Wait until the ContentPage's Handler and MauiContext are available.
        while (contentPage.Handler?.MauiContext == null)
        {
            await Task.Delay(50, cancellationToken);
        }

        IMauiContext? mauiContext = contentPage.Handler.MauiContext;

        // Retrieve the pre-defined overlay container by name.
        var overlayContainer = contentPage.FindByName<AbsoluteLayout>("OverlayContainer");
        if (overlayContainer == null)
        {
            Console.WriteLine("Overlay container not found. Ensure your ContentPage XAML defines an AbsoluteLayout with x:Name=\"OverlayContainer\".");
            return;
        }

        // Ensure the MAUI component has a handler.
        if (Component.Handler == null)
        {
            IElementHandler? handler = mauiContext.Handlers.GetHandler(Component.GetType());
            if (handler is IViewHandler viewHandler)
            {
                viewHandler.SetMauiContext(mauiContext);
                viewHandler.SetVirtualView(Component);
                Component.Handler = viewHandler;
                Console.WriteLine("Handler forced via MauiContext.");
            }
            else
            {
                Console.WriteLine("Failed to get an IViewHandler from MauiContext.");
            }
        }

        // Wrap the MAUI component in a container (here a simple Grid).
        Layout wrappedComponent = WrapInLayout(Component);
        // Start with zero opacity for fade-in.
        wrappedComponent.Opacity = 0;
        _overlayView = wrappedComponent;

        // Set absolute positioning so that it appears at the desired location.
        AbsoluteLayout.SetLayoutFlags(_overlayView, AbsoluteLayoutFlags.PositionProportional);
        AbsoluteLayout.SetLayoutBounds(_overlayView, new Rect(0.5, 0.8, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize));

        // Add the wrapped component to the overlay container.
        overlayContainer.Children.Add(_overlayView);

        // Brief delay for layout pass, then animate the fade in.
        await Task.Delay(50, cancellationToken);
        await _overlayView.FadeTo(1, 250);

        // Set up additional interop (for example, observing element position).
        await MauiBlazorBridgeInterop.ObserveElementPosition(_elementReference, ElementId, cancellationToken).NoSync();
    }

    private async Task OnElementPositionReported(object? sender, ElementPositionDto e)
    {
        double height = await GetPageHeight();

        // Compute conversion factor (Maui page height / viewport height).
        double conversionFactor = height / e.ViewportHeight;
        double dynamicOffsetCss = e.Height * 0.5;
        double overlayYCss = e.Top + e.Height + dynamicOffsetCss;
        double overlayYMaui = overlayYCss * conversionFactor;
        double yProportion = overlayYMaui / height;

        await MainThread.InvokeOnMainThreadAsync(() =>
        {
            if (_overlayView != null)
            {
                AbsoluteLayout.SetLayoutFlags(_overlayView, AbsoluteLayoutFlags.PositionProportional);
                AbsoluteLayout.SetLayoutBounds(_overlayView, new Rect(0.5, yProportion, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize));
            }
        });
    }

    private static async ValueTask<double> GetPageHeight()
    {
        Page? page = Application.Current?.Windows.FirstOrDefault()?.Page;
        double? height = page?.Height;
        while (height is null or <= 0)
        {
            await Task.Delay(100);
            height = page?.Height;
        }

        return height.Value;
    }

    // Wraps the provided MAUI component in a simple Grid container.
    private static Layout WrapInLayout(View mauiComponent)
    {
        var grid = new Grid
        {
            RowDefinitions = {new RowDefinition {Height = GridLength.Auto}},
            ColumnDefinitions = {new ColumnDefinition {Width = GridLength.Auto}},
            HorizontalOptions = LayoutOptions.Start,
            VerticalOptions = LayoutOptions.Start,
            BackgroundColor = Colors.Transparent
        };
        grid.Children.Add(mauiComponent);
        return grid;
    }

    // Removes the overlay element from the overlay container.
    public async ValueTask RemoveElement(bool fade = false)
    {
        BlazorCallbackRegistry.Unregister(ElementId);

        await MainThread.InvokeOnMainThreadAsync(async () =>
        {
            if (_overlayView != null)
            {
                if (fade)
                    await _overlayView.FadeTo(0, 250);

                if (_overlayView.Parent is Layout parentLayout)
                {
                    parentLayout.Children.Remove(_overlayView);
                    Console.WriteLine("Overlay view removed from overlay container.");
                }

                _overlayView.Handler?.DisconnectHandler();
                _overlayView.Handler = null;
                _overlayView = null;
            }
        });

        if (Component != null)
        {
            Component.DisconnectHandlers();
            Component.Handler = null;
            Component = null;
        }
    }

    public async ValueTask DisposeAsync()
    {
        GC.SuppressFinalize(this);

        if (_overlayView != null)
        {
            await RemoveElement().NoSync();
        }
    }

}